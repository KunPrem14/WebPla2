import streamlit as st
import pandas as pd
import os
from PIL import Image
import io

# Set up the page title and layout
st.set_page_config(
    page_title="‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á5‡∏Å‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏õ‡∏•‡∏≤2‡∏ï‡∏±‡∏ß‡πÇ‡∏Æ‡∏°‡πÄ‡∏°‡∏î‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà",
    layout="wide"
)

# Custom CSS for light green theme
st.markdown("""
<style>
    .reportview-container {
        background-color: #f2f7f2;
    }
    .stButton>button {
        background-color: #aed581;
        color: white;
        font-weight: bold;
    }
    .stButton>button:hover {
        background-color: #9ccc65;
        color: white;
    }
    h1, h2, h3 {
        color: #4a4a4a;
    }
</style>
""", unsafe_allow_html=True)

st.title("‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏£‡πâ‡∏≤‡∏ô‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á5‡∏Å‡πâ‡∏≠‡∏ô‡∏Å‡∏±‡∏ö‡∏õ‡∏•‡∏≤2‡∏ï‡∏±‡∏ß‡πÇ‡∏Æ‡∏°‡πÄ‡∏°‡∏î‡πÄ‡∏ö‡πÄ‡∏Å‡∏≠‡∏£‡∏µ‡πà üçûüêü")
st.markdown("---")

# File name for data storage
EXCEL_FILE = 'orders.xlsx'
IMAGE_FOLDER = 'images'

# --- Function to load and save data to Excel ---
def load_data():
    if os.path.exists(EXCEL_FILE):
        try:
            return pd.read_excel(EXCEL_FILE, engine='openpyxl')
        except Exception as e:
            st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå Excel: {e}")
            return pd.DataFrame(columns=[
                "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)", 
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥ (‡∏ö‡∏≤‡∏ó)", "‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡πà‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
                "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö", "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
            ])
    else:
        return pd.DataFrame(columns=[
            "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á", "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î", "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)", 
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", "‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥ (‡∏ö‡∏≤‡∏ó)", "‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡πà‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)", 
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö", "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå", "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏", "‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û"
        ])

def save_data(df):
    try:
        df.to_excel(EXCEL_FILE, index=False, engine='openpyxl')
    except Exception as e:
        st.error(f"‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå Excel: {e}")

# Load existing data on app startup
orders_df = load_data()

# Order form section
st.header("‡∏ü‡∏≠‡∏£‡πå‡∏°‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
with st.form(key="order_form", clear_on_submit=True):
    col1, col2 = st.columns(2)
    with col1:
        channel = st.selectbox("‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á", ["Facebook", "Line OA", "Tiktok", "‡∏™‡πà‡∏ß‡∏ô‡∏ï‡∏±‡∏ß"])
        
        product_option = st.selectbox("‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", ["‡πÄ‡∏Ñ‡πâ‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Å‡∏¥‡∏î", "‡∏Ñ‡∏±‡∏û‡πÄ‡∏Ñ‡πâ‡∏Å", "‡πÄ‡∏Ñ‡πâ‡∏Å‡πÇ‡∏ö‡∏£‡∏≤‡∏ì", "‡∏Ç‡∏ô‡∏°‡∏õ‡∏±‡∏á", "‡∏Ç‡∏ô‡∏°‡∏à‡∏±‡∏î‡πÄ‡∏ö‡∏£‡∏Ñ", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"])
        if product_option == "‡∏≠‡∏∑‡πà‡∏ô‡πÜ":
            product = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤‡∏≠‡∏∑‡πà‡∏ô‡πÜ", key="other_product_input")
        else:
            product = product_option
        
        details = st.text_area("‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤", help="‡πÄ‡∏ä‡πà‡∏ô ‡∏£‡∏™‡∏ä‡∏≤‡∏ï‡∏¥, ‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö, ‡∏Ñ‡∏≥‡∏≠‡∏ß‡∏¢‡∏û‡∏£")
        quantity = st.number_input("‡∏à‡∏≥‡∏ô‡∏ß‡∏ô", min_value=1, step=1)
    
    with col2:
        image_upload = st.file_uploader("‡πÅ‡∏ô‡∏ö‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û (Reference)", type=["jpg", "png", "jpeg"])
        total_price = st.number_input("‡∏£‡∏ß‡∏°‡∏¢‡∏≠‡∏î (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1.0)
        status = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞", ["‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡πà‡∏≤‡∏¢", "‡∏°‡∏±‡∏î‡∏à‡∏≥", "‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß", "‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô"])
        
        deposit = 0.0
        remaining = 0.0
        
        if status == "‡∏°‡∏±‡∏î‡∏à‡∏≥":
            deposit = st.number_input("‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥ (‡∏ö‡∏≤‡∏ó)", min_value=0.0, step=1.0)
            remaining = total_price - deposit
            st.info(f"‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏ä‡∏≥‡∏£‡∏∞: {remaining:,.2f} ‡∏ö‡∏≤‡∏ó")
        elif status == "‡∏à‡πà‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß":
            deposit = total_price
        else:
            remaining = total_price
        
        pickup_location = st.selectbox("‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö", ["‡∏™‡∏≤‡∏Ç‡∏≤ 1", "‡∏™‡∏≤‡∏Ç‡∏≤ 2", "‡∏≠‡∏∑‡πà‡∏ô‡πÜ"])
        if pickup_location == "‡∏≠‡∏∑‡πà‡∏ô‡πÜ":
            pickup_location = st.text_input("‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö‡∏≠‡∏∑‡πà‡∏ô‡πÜ", key="other_pickup_input")

        receiver = st.text_input("‡∏ä‡∏∑‡πà‡∏≠‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
    
    notes = st.text_area("‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏ (‡∏ñ‡πâ‡∏≤‡∏°‡∏µ)")
    submit_button = st.form_submit_button(label="‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå")
    
    if submit_button:
        image_path = None
        if image_upload is not None:
            if not os.path.exists(IMAGE_FOLDER):
                os.makedirs(IMAGE_FOLDER)
            
            img_name = f"{pd.Timestamp.now().strftime('%Y%m%d%H%M%S')}_{image_upload.name}"
            image_path = os.path.join(IMAGE_FOLDER, img_name)
            with open(image_path, "wb") as f:
                f.write(image_upload.getbuffer())
        
        new_row = {
            "‡∏ä‡πà‡∏≠‡∏á‡∏ó‡∏≤‡∏á": channel,
            "‡∏™‡∏¥‡∏ô‡∏Ñ‡πâ‡∏≤": product,
            "‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î": details,
            "‡∏à‡∏≥‡∏ô‡∏ß‡∏ô": quantity,
            "‡∏£‡∏≤‡∏Ñ‡∏≤‡∏£‡∏ß‡∏° (‡∏ö‡∏≤‡∏ó)": total_price,
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞": status,
            "‡∏¢‡∏≠‡∏î‡∏°‡∏±‡∏î‡∏à‡∏≥ (‡∏ö‡∏≤‡∏ó)": deposit,
            "‡∏¢‡∏≠‡∏î‡∏Ñ‡πâ‡∏≤‡∏á‡∏à‡πà‡∏≤‡∏¢ (‡∏ö‡∏≤‡∏ó)": remaining,
            "‡∏™‡∏ñ‡∏≤‡∏ô‡∏ó‡∏µ‡πà‡∏ô‡∏±‡∏î‡∏£‡∏±‡∏ö": pickup_location,
            "‡∏ú‡∏π‡πâ‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå": receiver,
            "‡∏´‡∏°‡∏≤‡∏¢‡πÄ‡∏´‡∏ï‡∏∏": notes,
            "‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û": image_path
        }
        
        orders_df = pd.concat([orders_df, pd.DataFrame([new_row])], ignore_index=True)
        save_data(orders_df)
        st.success("‡∏£‡∏±‡∏ö‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏•‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏£‡∏µ‡∏¢‡∏ö‡∏£‡πâ‡∏≠‡∏¢! ‚úÖ")
        st.experimental_rerun()

# Display orders section
st.markdown("---")
st.header("‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏≠‡∏≠‡πÄ‡∏î‡∏≠‡∏£‡πå‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î")

if not orders_df.empty:
    display_df = orders_df.copy()
    display_df['‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'] = display_df['‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'].apply(lambda)